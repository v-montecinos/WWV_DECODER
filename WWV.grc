options:
  parameters:
    author: vhmg
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: TEST_WWW_DECODER
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: WWV TIME SIGNAL DECODER
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: decimation
  id: variable
  parameters:
    comment: ''
    value: '48'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 16.0]
    rotation: 0
    state: enabled
- name: decoded
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: ''
    label: Decoded Time
    type: string
    value: time_year
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 12.0]
    rotation: 0
    state: true
- name: prob1
  id: variable_function_probe
  parameters:
    block_id: probSign1
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '50'
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 8.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 48e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 8.0]
    rotation: 0
    state: enabled
- name: time_year
  id: variable
  parameters:
    comment: ''
    value: python_mod.www_decoder(prob1)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 12.0]
    rotation: 0
    state: enabled
- name: analog_agc_xx_0
  id: analog_agc_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '50'
    max_gain: '200'
    maxoutbuf: '0'
    minoutbuf: '0'
    rate: 1e-5
    reference: '1.0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 360.0]
    rotation: 0
    state: enabled
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: HDMI
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 232.0]
    rotation: 0
    state: disabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: BlackHole 2ch
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 352.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '-1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 372.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 372.0]
    rotation: 0
    state: enabled
- name: blocks_uchar_to_float_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 372.0]
    rotation: 0
    state: enabled
- name: digital_binary_slicer_fb_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 372.0]
    rotation: 0
    state: enabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: '-100'
    comment: ''
    decim: decimation
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass_2(1,samp_rate,100,10,50)
    type: fcf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 356.0]
    rotation: 0
    state: enabled
- name: probSign1
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1144, 372.0]
    rotation: 0
    state: enabled
- name: python_mod
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\nimport\
      \ sys\nimport time\n\n\nt_start     = 0     # Rising edge timer\nt_stop    \
      \  = 0     # Falling edge timer\nflag        = 0     # Flag\ndetected    = 0\
      \     # Mark pulse detected flag\nmark_t      = 0     # Duration of mark\nspace_t\
      \     = 0     # Duration of space\nsync        = 0     # Sync condition flag\n\
      error       = 1     # Error flag\nbit_val     = 1     # 0 for 0, 1 for 1 & 2\
      \ for Position identifiers\ncounter     = 1     # Pulse counter\n\nminutes \
      \    = 0\nhours       = 0\nunit_year   = 0\nten_year    = 0\n\nyear        =\
      \ 0\n\noutput_str  = \"\"\n\n\ndef www_decoder(prob_level):\n    global t_start,t_stop,flag,detected,mark_t,space_t,sync,error,bit_val,counter,minutes,hours,unit_year,ten_year,year\n\
      \    global output_str\n\n#**********************************************************************************************************************\n\
      # Wait until the \"Hole\" condition is detected (1000 ms of silence) if occur\
      \ the sync flag is True\n#**********************************************************************************************************************\n\
      \n    if (sync == 0):\n    \n            if (prob_level == 0 and flag == 0):\
      \                     # Detect the falling edge and get the current time\n \
      \                   flag = 1\n                    t_start = time.time()\n  \
      \                  \n            if (prob_level == 1 and flag == 1):       \
      \              # Detect the rising edge and get the current time\n         \
      \           flag = 0\n                    t_stop = time.time()\n           \
      \         detected = 1\n            \n            if (detected == 1):      \
      \                               # If a whole pulse occur calc the pulse duration\n\
      \                    space_t = round(t_stop - t_start, 3)*1000       # Space\
      \ duration in ms\n                    detected = 0\n                    print\
      \ (space_t)\n                    \n                    if (space_t in range(1150,1250)):\
      \               # Range detection for \"Hole\" (1200 ms)\n                 \
      \       print (\"\\n\")\n                        print (\"Start Sync condition\
      \ detected\\n\")\n                        sync = 1\n                       \
      \ \n#**********************************************************************************************************************\n\
      # If sync flag is True,  wait until a whole pulse occur and calc the pulse duration\
      \ and change detected to True\n#**********************************************************************************************************************\n\
      \n    if (sync == 1):\n    \n            if (prob_level == 1 and flag == 0):\
      \                     # Detect the rising edge and get the current time\n  \
      \               flag = 1\n                 t_start = time.time()\n         \
      \        \n            if (prob_level == 0 and flag == 1):                 \
      \    # Detect the falling edge and get the current time\n                 flag\
      \ = 0\n                 t_stop = time.time()\n                 detected = 1\n\
      \                 \n#**********************************************************************************************************************\n\
      # If detected is True, evaluate range detection for 0, 1 o Px\n#**********************************************************************************************************************\n\
      \n    if (detected == 1):\n    \n                mark_t = round(t_stop - t_start,\
      \ 3)*1000            # Pulse duration in ms\n                print (mark_t)\n\
      \                detected = 0\n                error = 1\n                 \
      \       \n                if (mark_t in range(150,250)):                   \
      \   # Range detection for os (200ms)\n                    bit_val = 0\n    \
      \                error   = 0\n\n                elif (mark_t in range(450,550)):\
      \                    # Range detection for 1s (500ms)\n                    bit_val\
      \ = 1\n                    error   = 0\n\n                elif (mark_t in range(750,850)):\
      \                    # Range detection for Px (800ms)\n                    bit_val\
      \ = 2\n                    error   = 0\n\n#**********************************************************************************************************************\n\
      # If no error during the range detection continue with the decoding if not wait\
      \ until de next sync condition\n#**********************************************************************************************************************\n\
      \                if (error == 1):\n                    sync = 0\n          \
      \          print (\"Range detection error!, waiting until the next sync\\n\"\
      )\n  \n                if (error == 0):\n                    counter = counter\
      \ + 1\n  \n#**********************************************************************************************************************\n\
      # BCD decode for the moment only hours, minutes and year\n#**********************************************************************************************************************\n\
      \n                    if (counter == 5):\n                        unit_year\
      \ = unit_year +  1 * bit_val        # Decode units of year\n               \
      \     elif (counter == 6):\n                        unit_year = unit_year +\
      \  2 * bit_val\n                    elif (counter == 7):\n                 \
      \       unit_year = unit_year +  4 * bit_val\n                    elif (counter\
      \ == 8):\n                        unit_year = unit_year +  8 * bit_val\n   \
      \                     \n\n                    elif (counter == 11):        \
      \                   # Decode minutes\n                        minutes = minutes\
      \ +  1 * bit_val\n                    elif (counter == 12):\n              \
      \          minutes = minutes +  2 * bit_val\n                    elif (counter\
      \ == 13):\n                        minutes = minutes +  4 * bit_val\n      \
      \              elif (counter == 14):\n                        minutes = minutes\
      \ +  8 * bit_val\n                    elif (counter == 15):\n              \
      \          pass\n                    elif (counter == 16):\n               \
      \         minutes = minutes +  10 * bit_val\n                    elif (counter\
      \ == 17):\n                        minutes = minutes +  20 * bit_val\n     \
      \               elif (counter == 18):\n                        minutes = minutes\
      \ +  40 * bit_val\n                        \n                    elif (counter\
      \ == 21):                           # Decode hours\n                       \
      \ hours = hours +  1 * bit_val\n                    elif (counter == 22):\n\
      \                        hours = hours +  2 * bit_val\n                    elif\
      \ (counter == 23):\n                        hours = hours +  4 * bit_val\n \
      \                   elif (counter == 24):\n                        hours = hours\
      \ +  8 * bit_val\n                    elif (counter == 25):\n              \
      \          pass\n                    elif (counter == 26):\n               \
      \         hours = hours +  10 * bit_val\n                    elif (counter ==\
      \ 27):\n                        hours = hours +  20 * bit_val\n            \
      \            \n\n                    elif (counter == 52):                 \
      \          # Decode tens of year\n                        ten_year = ten_year\
      \ +  10 * bit_val\n                    elif (counter == 53):\n             \
      \           ten_year = ten_year +  20 * bit_val\n                    elif (counter\
      \ == 54):\n                        ten_year = ten_year +  40 * bit_val\n   \
      \                 elif (counter == 55):\n                        ten_year =\
      \ ten_year +  80 * bit_val\n\n\n                    elif (counter == 59):\n\
      \                    \n#**********************************************************************************************************************\n\
      # Data formating and extra validate\n#**********************************************************************************************************************\n\
      \                    \n                        hours = hours\n             \
      \           \n                        minutes = minutes + 1                \
      \       # Remenber add 1 minute because the decode finish\n                \
      \                                                    # before the next decode\n\
      \                        if (minutes == 60):\n                            minutes\
      \ = 0\n                            hours = hours +1\n                      \
      \      if (hours == 24):\n                                hours = 0\n      \
      \                  \n                        year = 2000 + ten_year + unit_year\n\
      \                        \n                        error = 1\n             \
      \           if (minutes in range (0,59)):\n                            error\
      \ = 0\n                        \n                        if (hours in range\
      \ (0,23)):\n                            error = 0\n                        \
      \     \n                        if (error == 1):\n                         \
      \   print (\"Error decoding, waiting until the next sync\\n\")\n           \
      \                 sync = 0\n                       \n                      \
      \      \n                        print (\"Time: \",hours,\":\",minutes,\"UTC\"\
      ,  \"Year:\",year)\n                        \n                        output_str\
      \ = str(hours) + \":\" + str(minutes) + \"  UTC     \" + \"  Year:\" + str(year)\n\
      \                        \n#**********************************************************************************************************************\n\
      # Reset counter and data before the next sync condition\n#**********************************************************************************************************************\n\
      \    \n                        sync      = 0\n                        counter\
      \   = 1\n                        minutes   = 0\n                        hours\
      \     = 0\n                        unit_year = 0\n                        ten_year\
      \  = 0\n                        year      = 0\n\n            \n    return output_str\n\
      \    \n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 24.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: 0,1,1,6
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Signal Scope"'
    nconnections: '3'
    size: int(samp_rate/decimation*2)
    srate: samp_rate/decimation
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2'
    ymin: '-2'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 116.0]
    rotation: 0
    state: true
- name: root_raised_cosine_filter_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.001'
    comment: ''
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '16'
    samp_rate: samp_rate/decimation
    sym_rate: '1'
    type: fir_filter_fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 348.0]
    rotation: 0
    state: enabled

connections:
- [analog_agc_xx_0, '0', qtgui_time_sink_x_0, '0']
- [analog_agc_xx_0, '0', root_raised_cosine_filter_0, '0']
- [audio_source_0, '0', audio_sink_0, '0']
- [audio_source_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [blocks_add_const_vxx_0, '0', digital_binary_slicer_fb_0, '0']
- [blocks_complex_to_mag_0, '0', analog_agc_xx_0, '0']
- [blocks_uchar_to_float_0, '0', probSign1, '0']
- [blocks_uchar_to_float_0, '0', qtgui_time_sink_x_0, '2']
- [digital_binary_slicer_fb_0, '0', blocks_uchar_to_float_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_complex_to_mag_0, '0']
- [root_raised_cosine_filter_0, '0', blocks_add_const_vxx_0, '0']
- [root_raised_cosine_filter_0, '0', qtgui_time_sink_x_0, '1']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
